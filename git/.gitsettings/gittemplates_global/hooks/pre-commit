#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

# Test whether file exists in current or parent directories
find_in_cwd_or_parent() {
  local slashes=${PWD//[^\/]/}; local directory=$PWD;
  for (( n=${#slashes}; n>0; --n )); do
    test -e $directory/$1 && echo "$directory/$1" && return 0
    directory=$directory/..
  done
  return 1
}

function ends_with_newline() {
  test ! -s "$1" || test $(tail -r -c1 "$1" | xxd -ps) = "0a"
}

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# if we are in the middle of merging skip hooks
MERGING=$(git rev-parse MERGE_HEAD 2>&1)
if [[ $? == 0 ]]; then
  exit 0
fi

# if we are in the middle of merging skip hooks
PICKING=$(git rev-parse CHERRY_PICK_HEAD 2>&1)
if [[ $? == 0 ]]; then
  exit 0
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# Determine if this build uses travis-ci and attempt to update the status
# in a non-blocking way
git stash -q --keep-index
travis_yml="$(find_in_cwd_or_parent .travis.yml)"
if ([ -f "${travis_yml}" ] && [ -f "/usr/local/bin/update_travis_ci_status" ]); then
    echo "sleep 15 && /usr/local/bin/update_travis_ci_status" | at now >/dev/null 2>&1
    echo "/usr/local/bin/update_travis_ci_status" | at now + 1 minute >/dev/null 2>&1
    if which travis >/dev/null 2>&1; then
	error_msg="$(travis lint ${travis_yml} | grep -i 'error')"
	if [ "$error_msg" ]; then
	    echo ".travis.yml failed travis lint, with the following error message:" >&2
	    echo "$error_msg" >&2
	    git stash pop -q
	    exit 1
	fi
    fi
fi
git stash pop -q

# If there is a file that do not end with a newline, print it's name and fail.
for f in $(git diff-index --name-status --cached $against | grep -v ^D | cut -c3-)
do
	if [[ "$f" =~ [.](h|m|c|rb|sh|py|txt|md|f90|F90|cmake|x64)$ ]]
	then
		if ! ends_with_newline "$f"
		then
			echo "No newline at end of file: $f" 1>&2
			exit 1
		fi
	fi
done

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
